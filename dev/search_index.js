var documenterSearchIndex = {"docs":
[{"location":"#MendelImpute.jl","page":"Home","title":"MendelImpute.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Fast genotype imputation, phasing, and admixture estimation!","category":"page"},{"location":"","page":"Home","title":"Home","text":"MendelImpute.jl is the fastest and least memory-consuming software for phasing and genotype imputation, as of 2020. It is also capable of ancestry estimation.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Built-in support for imputing VCF (.vcf, .vcf.gz) and PLINK files.\nOut-of-the-box multithreaded (shared memory) parallelism. \nAdmixture estimation, with code examples to make pretty plots!\nUltra-compressed file for phased genotypes.\nImputation on dosage data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Given a target genotype file (phased or unphased and may contain missing data) and a reference haplotype file (phased, no missing), our software imputes every SNP in the reference file to the target file, outputing phased or unphased genotypes. Like many other software, SNPs typed in target must all be present in the reference panel. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download and install Julia. Within Julia, copy and paste the following: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/OpenMendel/SnpArrays.jl.git\"))\nPkg.add(PackageSpec(url=\"https://github.com/OpenMendel/VCFTools.jl.git\"))\nPkg.add(PackageSpec(url=\"https://github.com/OpenMendel/MendelImpute.jl.git\"))","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package supports Julia v1.5+.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/api.md\"\n]\nDepth = 2","category":"page"},{"location":"man/api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Documentation for MendelImpute.jl's functions.","category":"page"},{"location":"man/api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"man/api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"phase\ncompress_haplotypes\npaint\ncomposition\nunique_populations\nconvert_compressed","category":"page"},{"location":"man/api/#MendelImpute.phase","page":"API","title":"MendelImpute.phase","text":"phase(tgtfile, reffile; [outfile], [impute], [phase], [width], [recreen], \n[max_haplotypes], [stepwise], [thinning_factor], [scale_allelefreq], \n[dynamic_programming])\n\nMain function of MendelImpute program. Phasing (haplotying) of tgtfile from a pool of haplotypes reffile by sliding windows and saves result in outfile.\n\nInput\n\ntgtfile: VCF or PLINK files. VCF files should end in .vcf or .vcf.gz.   PLINK files should exclude .bim/.bed/.fam suffixes but the trio must all   be present in the same directory.\nreffile: Reference haplotype file ending in .vcf, .vcf.gz, or .jlso    (compressed binary files).\n\nOptional Inputs\n\noutfile: output filename ending in .vcf.gz, .vcf, or .jlso. VCF output   genotypes will have no missing data. If ending in .jlso, will output   ultra-compressed data structure recording HaplotypeMosaicPairs for    each sample\nimpute: If true, untyped SNPs will be imputed, otherwise only missing   snps in tgtfile will be imputed.\nphase: If true, all output genotypes will be phased. Otherwise all   output genotypes will be unphased.\ndosage: If true, will assume target matrix are dosages for imputation. \nmax_d: Maximum number of unique haplotypes in each window. Note this number   is used in the compression step and nowhere else. \nrescreen: This option saves a number of top haplotype pairs when solving   the least squares objective, and re-minimize least squares on just   observed data.\nmax_haplotypes Maximum number of haplotypes for using to global search.    This number should be specified along with stepscreen or thinning_factor\nstepwise: This option solves the least squares objective by first finding   stepwise top haplotypes using a stepwise heuristic then finds the next   haplotype using global search.\nthinning_factor: This option solves the least squares objective on only   thining_factor unique haplotypes.\nscale_allelefreq Boolean indicating whether to give rare SNPs more weight   scaled by wᵢ = 1 / √2p(1-p) where max weight is 2. \ndynamic_programming Boolean indicating whether to phase with a global    search that finds the longest haplotype stretch over all windows.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#MendelImpute.compress_haplotypes","page":"API","title":"MendelImpute.compress_haplotypes","text":"compress_haplotypes(reffile, tgtfile, outfile, d)\n\nCuts a haplotype matrix reffile into windows of variable width so that each window has less than d unique haplotypes. Saves result to outfile as a compressed binary format. All SNPs in tgtfile must be present in reffile. \n\nWhy is tgtfile required?\n\nThe unique haplotypes in each window is computed on the typed SNPs only.  A genotype matrix tgtfile is used to identify the typed SNPs. In the future,  hopefully we can pre-compute compressed haplotype panels for all genotyping  platforms and provide them as downloadable files. But currently, users must run this function by themselves. \n\nInputs\n\nreffile: reference haplotype file name (ends in .vcf or .vcf.gz)\ntgtfile: target genotype file name (ends in .vcf or .vcf.gz)\noutfile: Output file name (ends in .jlso)\nd: Max number of unique haplotypes per window (recommended d = 1000). \n\n\n\n\n\n","category":"function"},{"location":"man/api/#MendelImpute.paint","page":"API","title":"MendelImpute.paint","text":"paint(sample_phase, panelID, refID_to_population, ...)\n\nConverts a person's phased haplotype lengths into segments of percentages. This function is used for easier plotting a \"painted chromosome\".\n\nArguments\n\nsample_phase: A HaplotypeMosaicPair storing phase information for a   sample, includes haplotype start position and haplotype label.\npanelID: Sample ID's in the reference haplotype panel\nrefID_to_population: A dictionary mapping each ID in the haplotype    reference panel to its population origin. \n\nOptional inputs\n\npopulations: A unique list of populations present in refID_to_population\n\nOutput\n\ncomposition: A list of percentages where composition[i] equals the   sample's ancestry (in %) from populations[i] \n\n\n\n\n\n","category":"function"},{"location":"man/api/#MendelImpute.composition","page":"API","title":"MendelImpute.composition","text":"composition(sample_phase, panelID, refID_to_population, [populations])\n\nComputes a sample's chromosome composition based on phase information. This function is used for easier plotting a person's admixed proportions.\n\nArguments\n\nsample_phase: A HaplotypeMosaicPair storing phase information for a   sample, includes haplotype start position and haplotype label.\npanelID: Sample ID's in the reference haplotype panel\nrefID_to_population: A dictionary mapping each ID in the haplotype    reference panel to its population origin. \n\nOptional inputs\n\npopulations: A unique list of populations present in refID_to_population\n\nOutput\n\ncomposition: A list of percentages where composition[i] equals the   sample's ancestry (in %) from populations[i] \n\n\n\n\n\n","category":"function"},{"location":"man/api/#MendelImpute.convert_compressed","page":"API","title":"MendelImpute.convert_compressed","text":"convert_compressed(t, phaseinfo, H)\n\nConverts phaseinfo into a phased genotype matrix of type t using the full reference haplotype panel H \n\nInputs\n\nt: Type of matrix. If bool, genotypes are converted to a BitMatrix\nphaseinfo: Vector of HaplotypeMosaicPairs stored in .jlso format\nreffile: The complete (uncompressed) haplotype reference file\n\nOutput\n\n(X1, X2): Tuple of matrix where X1 is allele1 and X2 is allele2. Each    column is a sample. \nsampleID: The ID's of each imputed person. \n\n\n\n\n\nconvert_compressed(t, phaseinfo, H)\n\nColumns of H are haplotypes.\n\n\n\n\n\n","category":"function"}]
}
